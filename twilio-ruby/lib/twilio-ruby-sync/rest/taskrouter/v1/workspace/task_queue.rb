##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Taskrouter < Domain
      class V1 < Version
        class WorkspaceContext < InstanceContext
          class TaskQueueList < ListResource
            ##
            # Initialize the TaskQueueList
            # @param [Version] version Version that contains the resource
            # @param [String] workspace_sid The workspace_sid
            
            # @return [TaskQueueList] TaskQueueList
            def initialize(version, workspace_sid: nil)
              super(version)
              
              # Path Solution
              @solution = {
                  workspace_sid: workspace_sid
              }
              @uri = "/Workspaces/#{@solution[:workspace_sid]}/TaskQueues"
              
              # Components
              @statistics = nil
            end
            
            ##
            # Lists TaskQueueInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [String] friendly_name The friendly_name
            # @param [String] evaluate_worker_attributes The evaluate_worker_attributes
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #                   guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
            #  the default value of 50 records.  If no page_size is                      defined
            #  but a limit is defined, stream() will attempt to read                      the
            #  limit with the most efficient page size,                      i.e. min(limit, 1000)
            
            # @return [Array] Array of up to limit results
            def list(friendly_name: nil, evaluate_worker_attributes: nil, limit: nil, page_size: nil)
              self.stream(
                  friendly_name: friendly_name,
                  evaluate_worker_attributes: evaluate_worker_attributes,
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            ##
            # Streams TaskQueueInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] friendly_name The friendly_name
            # @param [String] evaluate_worker_attributes The evaluate_worker_attributes
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to                      read the
            #  limit with the most efficient page size,                       i.e. min(limit, 1000)
            
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(friendly_name: nil, evaluate_worker_attributes: nil, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  friendly_name: friendly_name,
                  evaluate_worker_attributes: evaluate_worker_attributes,
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            ##
            # When passed a block, yields TaskQueueInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] friendly_name The friendly_name
            # @param [String] evaluate_worker_attributes The evaluate_worker_attributes
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to read the
            #                       limit with the most efficient page size, i.e. min(limit, 1000)
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of TaskQueueInstance records from the API.
            # Request is executed immediately.
            # @param [String] friendly_name The friendly_name
            # @param [String] evaluate_worker_attributes The evaluate_worker_attributes
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            
            # @return [Page] Page of TaskQueueInstance
            def page(friendly_name: nil, evaluate_worker_attributes: nil, page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'FriendlyName' => friendly_name,
                  'EvaluateWorkerAttributes' => evaluate_worker_attributes,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return TaskQueuePage.new(@version, response, @solution)
            end
            
            ##
            # Retrieve a single page of TaskQueueInstance records from the API.
            # Request is executed immediately.
            # @param [String] friendly_name The friendly_name
            # @param [String] reservation_activity_sid The reservation_activity_sid
            # @param [String] assignment_activity_sid The assignment_activity_sid
            # @param [String] target_workers The target_workers
            # @param [String] max_reserved_workers The max_reserved_workers
            
            # @return [TaskQueueInstance] Newly created TaskQueueInstance
            def create(friendly_name: nil, reservation_activity_sid: nil, assignment_activity_sid: nil, target_workers: nil, max_reserved_workers: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'ReservationActivitySid' => reservation_activity_sid,
                  'AssignmentActivitySid' => assignment_activity_sid,
                  'TargetWorkers' => target_workers,
                  'MaxReservedWorkers' => max_reserved_workers,
              }
              
              payload = @version.create(
                  'POST',
                  @uri,
                  data: data
              )
              
              return TaskQueueInstance.new(
                  @version,
                  payload,
                  workspace_sid: @solution['workspace_sid'],
              )
            end
            
            ##
            # Access the statistics
            # @return [TaskQueuesStatisticsList] TaskQueuesStatisticsList
            def statistics
              @statistics ||= TaskQueuesStatisticsList.new(
                  @version,
                  workspace_sid: @solution[:workspace_sid],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Taskrouter.V1.TaskQueueList>'
            end
          end
        
          class TaskQueuePage < Page
            ##
            # Initialize the TaskQueuePage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @param [String] workspace_sid The workspace_sid
            
            # @return [TaskQueuePage] TaskQueuePage
            def initialize(version, response, solution)
              super(version, response)
              
              # Path Solution
              @solution = solution
            end
            
            ##
            # Build an instance of TaskQueueInstance
            # @param [Hash] payload Payload response from the API
            
            # @return [TaskQueueInstance] TaskQueueInstance
            def get_instance(payload)
              return TaskQueueInstance.new(
                  @version,
                  payload,
                  workspace_sid: @solution['workspace_sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Taskrouter.V1.TaskQueuePage>'
            end
          end
        
          class TaskQueueContext < InstanceContext
            ##
            # Initialize the TaskQueueContext
            # @param [Version] version Version that contains the resource
            # @param [String] workspace_sid The workspace_sid
            # @param [String] sid The sid
            
            # @return [TaskQueueContext] TaskQueueContext
            def initialize(version, workspace_sid, sid)
              super(version)
              
              # Path Solution
              @solution = {
                  workspace_sid: workspace_sid,
                  sid: sid,
              }
              @uri = "/Workspaces/#{@solution[:workspace_sid]}/TaskQueues/#{@solution[:sid]}"
              
              # Dependents
              @statistics = nil
            end
            
            ##
            # Fetch a TaskQueueInstance
            # @return [TaskQueueInstance] Fetched TaskQueueInstance
            def fetch
              params = {}
              
              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )
              
              return TaskQueueInstance.new(
                  @version,
                  payload,
                  workspace_sid: @solution['workspace_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Update the TaskQueueInstance
            # @param [String] friendly_name The friendly_name
            # @param [String] target_workers The target_workers
            # @param [String] reservation_activity_sid The reservation_activity_sid
            # @param [String] assignment_activity_sid The assignment_activity_sid
            # @param [String] max_reserved_workers The max_reserved_workers
            
            # @return [TaskQueueInstance] Updated TaskQueueInstance
            def update(friendly_name: nil, target_workers: nil, reservation_activity_sid: nil, assignment_activity_sid: nil, max_reserved_workers: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'TargetWorkers' => target_workers,
                  'ReservationActivitySid' => reservation_activity_sid,
                  'AssignmentActivitySid' => assignment_activity_sid,
                  'MaxReservedWorkers' => max_reserved_workers,
              }
              
              payload = @version.update(
                  'POST',
                  @uri,
                  data: data,
              )
              
              return TaskQueueInstance.new(
                  @version,
                  payload,
                  workspace_sid: @solution['workspace_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Deletes the TaskQueueInstance
            # @return [Boolean] true if delete succeeds, true otherwise
            def delete
              return @version.delete('delete', @uri)
            end
            
            ##
            # Access the statistics
            # @return [TaskQueueStatisticsList] TaskQueueStatisticsList
            def statistics
              return TaskQueueStatisticsContext.new(
                  @version,
                  @solution[:workspace_sid],
                  @solution[:sid],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Taskrouter.V1.TaskQueueContext #{context}>"
            end
          end
        
          class TaskQueueInstance < InstanceResource
            ##
            # Initialize the TaskQueueInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] workspace_sid The workspace_sid
            # @param [String] sid The sid
            
            # @return [TaskQueueInstance] TaskQueueInstance
            def initialize(version, payload, workspace_sid: nil, sid: nil)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'assignment_activity_sid' => payload['assignment_activity_sid'],
                  'assignment_activity_name' => payload['assignment_activity_name'],
                  'date_created' => Twilio.deserialize_iso8601(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601(payload['date_updated']),
                  'friendly_name' => payload['friendly_name'],
                  'max_reserved_workers' => payload['max_reserved_workers'].to_i,
                  'reservation_activity_sid' => payload['reservation_activity_sid'],
                  'reservation_activity_name' => payload['reservation_activity_name'],
                  'sid' => payload['sid'],
                  'target_workers' => payload['target_workers'],
                  'url' => payload['url'],
                  'workspace_sid' => payload['workspace_sid'],
              }
              
              # Context
              @instance_context = nil
              @params = {
                  'workspace_sid' => workspace_sid,
                  'sid' => sid || @properties['sid'],
              }
            end
            
            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @param [Version] version Version that contains the resource
            
            # @return [TaskQueueContext] TaskQueueContext for this TaskQueueInstance
            def context
              unless @instance_context
                @instance_context = TaskQueueContext.new(
                    @version,
                    @params['workspace_sid'],
                    @params['sid'],
                )
              end
              @instance_context
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def assignment_activity_sid
              @properties['assignment_activity_sid']
            end
            
            def assignment_activity_name
              @properties['assignment_activity_name']
            end
            
            def date_created
              @properties['date_created']
            end
            
            def date_updated
              @properties['date_updated']
            end
            
            def friendly_name
              @properties['friendly_name']
            end
            
            def max_reserved_workers
              @properties['max_reserved_workers']
            end
            
            def reservation_activity_sid
              @properties['reservation_activity_sid']
            end
            
            def reservation_activity_name
              @properties['reservation_activity_name']
            end
            
            def sid
              @properties['sid']
            end
            
            def target_workers
              @properties['target_workers']
            end
            
            def url
              @properties['url']
            end
            
            def workspace_sid
              @properties['workspace_sid']
            end
            
            ##
            # Fetch a TaskQueueInstance
            # @return [TaskQueueInstance] Fetched TaskQueueInstance
            def fetch
              @context.fetch()
            end
            
            ##
            # Update the TaskQueueInstance
            # @param [String] friendly_name The friendly_name
            # @param [String] target_workers The target_workers
            # @param [String] reservation_activity_sid The reservation_activity_sid
            # @param [String] assignment_activity_sid The assignment_activity_sid
            # @param [String] max_reserved_workers The max_reserved_workers
            
            # @return [TaskQueueInstance] Updated TaskQueueInstance
            def update(friendly_name: nil, target_workers: nil, reservation_activity_sid: nil, assignment_activity_sid: nil, max_reserved_workers: nil)
              @context.update(
                  target_workers: target_workers,
                  reservation_activity_sid: reservation_activity_sid,
                  assignment_activity_sid: assignment_activity_sid,
                  max_reserved_workers: max_reserved_workers,
              )
            end
            
            ##
            # Deletes the TaskQueueInstance
            # @return [Boolean] true if delete succeeds, true otherwise
            def delete
              @context.delete()
            end
            
            ##
            # Access the statistics
            # @return [statistics] statistics
            def statistics
              @context.statistics
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Taskrouter.V1.TaskQueueInstance #{context}>"
            end
          end
        end
      end
    end
  end
end