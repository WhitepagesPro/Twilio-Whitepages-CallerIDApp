##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Preview < Domain
      class Insights < Version
        class CallContext < InstanceContext
          class EventsList < ListResource
            ##
            # Initialize the EventsList
            # @param [Version] version Version that contains the resource
            # @param [String] sid The sid
            
            # @return [EventsList] EventsList
            def initialize(version, sid: nil)
              super(version)
              
              # Path Solution
              @solution = {
                  sid: sid
              }
              @uri = "/Calls/#{@solution[:call_sid]}/Events"
            end
            
            ##
            # Lists EventsInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [String] call_sid The call_sid
            # @param [String] level The level
            # @param [String] group The group
            # @param [String] name The name
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #                   guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
            #  the default value of 50 records.  If no page_size is                      defined
            #  but a limit is defined, stream() will attempt to read                      the
            #  limit with the most efficient page size,                      i.e. min(limit, 1000)
            
            # @return [Array] Array of up to limit results
            def list(call_sid: nil, level: nil, group: nil, name: nil, limit: nil, page_size: nil)
              self.stream(
                  call_sid: call_sid,
                  level: level,
                  group: group,
                  name: name,
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            ##
            # Streams EventsInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] call_sid The call_sid
            # @param [String] level The level
            # @param [String] group The group
            # @param [String] name The name
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to                      read the
            #  limit with the most efficient page size,                       i.e. min(limit, 1000)
            
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(call_sid: nil, level: nil, group: nil, name: nil, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  call_sid: call_sid,
                  level: level,
                  group: group,
                  name: name,
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            ##
            # When passed a block, yields EventsInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [String] call_sid The call_sid
            # @param [String] level The level
            # @param [String] group The group
            # @param [String] name The name
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to read the
            #                       limit with the most efficient page size, i.e. min(limit, 1000)
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of EventsInstance records from the API.
            # Request is executed immediately.
            # @param [String] call_sid The call_sid
            # @param [String] level The level
            # @param [String] group The group
            # @param [String] name The name
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            
            # @return [Page] Page of EventsInstance
            def page(call_sid: nil, level: nil, group: nil, name: nil, page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'CallSid' => call_sid,
                  'Level' => level,
                  'Group' => group,
                  'Name' => name,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return EventsPage.new(@version, response, @solution)
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Preview.Insights.EventsList>'
            end
          end
        
          class EventsPage < Page
            ##
            # Initialize the EventsPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @param [String] sid The sid
            
            # @return [EventsPage] EventsPage
            def initialize(version, response, solution)
              super(version, response)
              
              # Path Solution
              @solution = solution
            end
            
            ##
            # Build an instance of EventsInstance
            # @param [Hash] payload Payload response from the API
            
            # @return [EventsInstance] EventsInstance
            def get_instance(payload)
              return EventsInstance.new(
                  @version,
                  payload,
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Preview.Insights.EventsPage>'
            end
          end
        
          class EventsInstance < InstanceResource
            ##
            # Initialize the EventsInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] sid The sid
            
            # @return [EventsInstance] EventsInstance
            def initialize(version, payload, sid: nil)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'name' => payload['name'],
                  'group' => payload['group'],
                  'publisher' => payload['publisher'],
                  'timestamp' => Twilio.deserialize_iso8601(payload['timestamp']),
                  'level' => payload['level'],
                  'payload_type' => payload['payload_type'],
                  'account_sid' => payload['account_sid'],
                  'parent_account_sid' => payload['parent_account_sid'],
                  'account_friendly_name' => payload['account_friendly_name'],
                  'parent_account_friendly_name' => payload['parent_account_friendly_name'],
                  'sid' => payload['sid'],
                  'payload' => payload['payload'],
                  'publisher_metadata' => payload['publisher_metadata'],
              }
            end
            
            def name
              @properties['name']
            end
            
            def group
              @properties['group']
            end
            
            def publisher
              @properties['publisher']
            end
            
            def timestamp
              @properties['timestamp']
            end
            
            def level
              @properties['level']
            end
            
            def payload_type
              @properties['payload_type']
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def parent_account_sid
              @properties['parent_account_sid']
            end
            
            def account_friendly_name
              @properties['account_friendly_name']
            end
            
            def parent_account_friendly_name
              @properties['parent_account_friendly_name']
            end
            
            def sid
              @properties['sid']
            end
            
            def payload
              @properties['payload']
            end
            
            def publisher_metadata
              @properties['publisher_metadata']
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              "<Twilio.Preview.Insights.EventsInstance>"
            end
          end
        end
      end
    end
  end
end