##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class IpMessaging < Domain
      class V1 < Version
        class ServiceContext < InstanceContext
          class ChannelList < ListResource
            ##
            # Initialize the ChannelList
            # @param [Version] version Version that contains the resource
            # @param [String] service_sid The service_sid
            
            # @return [ChannelList] ChannelList
            def initialize(version, service_sid: nil)
              super(version)
              
              # Path Solution
              @solution = {
                  service_sid: service_sid
              }
              @uri = "/Services/#{@solution[:service_sid]}/Channels"
            end
            
            ##
            # Retrieve a single page of ChannelInstance records from the API.
            # Request is executed immediately.
            # @param [String] friendly_name The friendly_name
            # @param [String] unique_name The unique_name
            # @param [Hash] attributes The attributes
            # @param [channel.ChannelType] type The type
            
            # @return [ChannelInstance] Newly created ChannelInstance
            def create(friendly_name: nil, unique_name: nil, attributes: nil, type: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'UniqueName' => unique_name,
                  'Attributes' => attributes,
                  'Type' => type,
              }
              
              payload = @version.create(
                  'POST',
                  @uri,
                  data: data
              )
              
              return ChannelInstance.new(
                  @version,
                  payload,
                  service_sid: @solution['service_sid'],
              )
            end
            
            ##
            # Lists ChannelInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #                   guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
            #  the default value of 50 records.  If no page_size is                      defined
            #  but a limit is defined, stream() will attempt to read                      the
            #  limit with the most efficient page size,                      i.e. min(limit, 1000)
            
            # @return [Array] Array of up to limit results
            def list(limit: nil, page_size: nil)
              self.stream(
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            ##
            # Streams ChannelInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to                      read the
            #  limit with the most efficient page size,                       i.e. min(limit, 1000)
            
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            ##
            # When passed a block, yields ChannelInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to read the
            #                       limit with the most efficient page size, i.e. min(limit, 1000)
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of ChannelInstance records from the API.
            # Request is executed immediately.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            
            # @return [Page] Page of ChannelInstance
            def page(page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return ChannelPage.new(@version, response, @solution)
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.IpMessaging.V1.ChannelList>'
            end
          end
        
          class ChannelPage < Page
            ##
            # Initialize the ChannelPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @param [String] service_sid The service_sid
            
            # @return [ChannelPage] ChannelPage
            def initialize(version, response, solution)
              super(version, response)
              
              # Path Solution
              @solution = solution
            end
            
            ##
            # Build an instance of ChannelInstance
            # @param [Hash] payload Payload response from the API
            
            # @return [ChannelInstance] ChannelInstance
            def get_instance(payload)
              return ChannelInstance.new(
                  @version,
                  payload,
                  service_sid: @solution['service_sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.IpMessaging.V1.ChannelPage>'
            end
          end
        
          class ChannelContext < InstanceContext
            ##
            # Initialize the ChannelContext
            # @param [Version] version Version that contains the resource
            # @param [String] service_sid The service_sid
            # @param [String] sid The sid
            
            # @return [ChannelContext] ChannelContext
            def initialize(version, service_sid, sid)
              super(version)
              
              # Path Solution
              @solution = {
                  service_sid: service_sid,
                  sid: sid,
              }
              @uri = "/Services/#{@solution[:service_sid]}/Channels/#{@solution[:sid]}"
              
              # Dependents
              @members = nil
              @messages = nil
            end
            
            ##
            # Fetch a ChannelInstance
            # @return [ChannelInstance] Fetched ChannelInstance
            def fetch
              params = {}
              
              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )
              
              return ChannelInstance.new(
                  @version,
                  payload,
                  service_sid: @solution['service_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Deletes the ChannelInstance
            # @return [Boolean] true if delete succeeds, true otherwise
            def delete
              return @version.delete('delete', @uri)
            end
            
            ##
            # Update the ChannelInstance
            # @param [String] friendly_name The friendly_name
            # @param [String] unique_name The unique_name
            # @param [Hash] attributes The attributes
            # @param [channel.ChannelType] type The type
            
            # @return [ChannelInstance] Updated ChannelInstance
            def update(friendly_name: nil, unique_name: nil, attributes: nil, type: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'UniqueName' => unique_name,
                  'Attributes' => attributes,
                  'Type' => type,
              }
              
              payload = @version.update(
                  'POST',
                  @uri,
                  data: data,
              )
              
              return ChannelInstance.new(
                  @version,
                  payload,
                  service_sid: @solution['service_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Access the members
            # @return [MemberList] MemberList
            def members(sid=:unset)
              if sid != :unset
                return MemberContext.new(
                    @version,
                    @solution[:service_sid],
                    @solution[:sid],
                    sid,
                )
              end
              
              unless @members
                @members = MemberList.new(
                    @version,
                    service_sid: @solution[:service_sid],
                    channel_sid: @solution[:sid],
                )
              end
              
              @members
            end
            
            ##
            # Access the messages
            # @return [MessageList] MessageList
            def messages(sid=:unset)
              if sid != :unset
                return MessageContext.new(
                    @version,
                    @solution[:service_sid],
                    @solution[:sid],
                    sid,
                )
              end
              
              unless @messages
                @messages = MessageList.new(
                    @version,
                    service_sid: @solution[:service_sid],
                    channel_sid: @solution[:sid],
                )
              end
              
              @messages
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.IpMessaging.V1.ChannelContext #{context}>"
            end
          end
        
          class ChannelInstance < InstanceResource
            ##
            # Initialize the ChannelInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] service_sid The service_sid
            # @param [String] sid The sid
            
            # @return [ChannelInstance] ChannelInstance
            def initialize(version, payload, service_sid: nil, sid: nil)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'sid' => payload['sid'],
                  'account_sid' => payload['account_sid'],
                  'service_sid' => payload['service_sid'],
                  'friendly_name' => payload['friendly_name'],
                  'unique_name' => payload['unique_name'],
                  'attributes' => payload['attributes'],
                  'type' => payload['type'],
                  'date_created' => Twilio.deserialize_iso8601(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601(payload['date_updated']),
                  'created_by' => payload['created_by'],
                  'url' => payload['url'],
                  'links' => payload['links'],
              }
              
              # Context
              @instance_context = nil
              @params = {
                  'service_sid' => service_sid,
                  'sid' => sid || @properties['sid'],
              }
            end
            
            ##
            # Generate an instance context for the instance, the context is capable of
            # performing various actions.  All instance actions are proxied to the context
            # @param [Version] version Version that contains the resource
            
            # @return [ChannelContext] ChannelContext for this ChannelInstance
            def context
              unless @instance_context
                @instance_context = ChannelContext.new(
                    @version,
                    @params['service_sid'],
                    @params['sid'],
                )
              end
              @instance_context
            end
            
            def sid
              @properties['sid']
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def service_sid
              @properties['service_sid']
            end
            
            def friendly_name
              @properties['friendly_name']
            end
            
            def unique_name
              @properties['unique_name']
            end
            
            def attributes
              @properties['attributes']
            end
            
            def type
              @properties['type']
            end
            
            def date_created
              @properties['date_created']
            end
            
            def date_updated
              @properties['date_updated']
            end
            
            def created_by
              @properties['created_by']
            end
            
            def url
              @properties['url']
            end
            
            def links
              @properties['links']
            end
            
            ##
            # Fetch a ChannelInstance
            # @return [ChannelInstance] Fetched ChannelInstance
            def fetch
              @context.fetch()
            end
            
            ##
            # Deletes the ChannelInstance
            # @return [Boolean] true if delete succeeds, true otherwise
            def delete
              @context.delete()
            end
            
            ##
            # Update the ChannelInstance
            # @param [String] friendly_name The friendly_name
            # @param [String] unique_name The unique_name
            # @param [Hash] attributes The attributes
            # @param [channel.ChannelType] type The type
            
            # @return [ChannelInstance] Updated ChannelInstance
            def update(friendly_name: nil, unique_name: nil, attributes: nil, type: nil)
              @context.update(
                  unique_name: unique_name,
                  attributes: attributes,
                  type: type,
              )
            end
            
            ##
            # Access the members
            # @return [members] members
            def members
              @context.members
            end
            
            ##
            # Access the messages
            # @return [messages] messages
            def messages
              @context.messages
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.IpMessaging.V1.ChannelInstance #{context}>"
            end
          end
        end
      end
    end
  end
end