##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Api < Domain
      class V2010 < Version
        class AccountContext < InstanceContext
          class SmsList < ListResource
            class SmsMessageList < ListResource
              ##
              # Initialize the SmsMessageList
              # @param [Version] version Version that contains the resource
              # @param [String] account_sid A 34 character string that uniquely identifies this
              #   resource.
              
              # @return [SmsMessageList] SmsMessageList
              def initialize(version, account_sid: nil)
                super(version)
                
                # Path Solution
                @solution = {
                    account_sid: account_sid
                }
                @uri = "/Accounts/#{@solution[:account_sid]}/SMS/Messages.json"
              end
              
              ##
              # Retrieve a single page of SmsMessageInstance records from the API.
              # Request is executed immediately.
              # @param [String] to The to
              # @param [String] from The from
              # @param [String] status_callback The status_callback
              # @param [String] application_sid The application_sid
              # @param [String] body The body
              # @param [String] media_url The media_url
              
              # @return [SmsMessageInstance] Newly created SmsMessageInstance
              def create(to: nil, from: nil, status_callback: nil, application_sid: nil, body: nil, media_url: nil)
                data = {
                    'To' => to,
                    'From' => from,
                    'Body' => body,
                    'MediaUrl' => media_url,
                    'StatusCallback' => status_callback,
                    'ApplicationSid' => application_sid,
                }
                
                payload = @version.create(
                    'POST',
                    @uri,
                    data: data
                )
                
                return SmsMessageInstance.new(
                    @version,
                    payload,
                    account_sid: @solution['account_sid'],
                )
              end
              
              ##
              # Lists SmsMessageInstance records from the API as a list.
              # Unlike stream(), this operation is eager and will load `limit` records into
              # memory before returning.
              # @param [String] to The to
              # @param [String] from The from
              # @param [Time] date_sent_before The date_sent
              # @param [Time] date_sent The date_sent
              # @param [Time] date_sent_after: The date_sent
              # @param [Integer] limit Upper limit for the number of records to return. stream()
              #                   guarantees to never return more than limit.  Default is no limit
              # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
              #  the default value of 50 records.  If no page_size is                      defined
              #  but a limit is defined, stream() will attempt to read                      the
              #  limit with the most efficient page size,                      i.e. min(limit, 1000)
              
              # @return [Array] Array of up to limit results
              def list(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, limit: nil, page_size: nil)
                self.stream(
                    to: to,
                    from: from,
                    date_sent_before: date_sent_before,
                    date_sent: date_sent,
                    date_sent_after: date_sent_after,
                    limit: limit,
                    page_size: page_size
                ).entries
              end
              
              ##
              # Streams SmsMessageInstance records from the API as an Enumerable.
              # This operation lazily loads records as efficiently as possible until the limit
              # is reached.
              # @param [String] to The to
              # @param [String] from The from
              # @param [Time] date_sent_before The date_sent
              # @param [Time] date_sent The date_sent
              # @param [Time] date_sent_after: The date_sent
              # @param [Integer] limit Upper limit for the number of records to return.                  stream()
              #  guarantees to never return more than limit.                  Default is no limit
              # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
              #  the default value of 50 records.                      If no page_size is defined
              #                       but a limit is defined, stream() will attempt to                      read the
              #  limit with the most efficient page size,                       i.e. min(limit, 1000)
              
              # @return [Enumerable] Enumerable that will yield up to limit results
              def stream(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, limit: nil, page_size: nil)
                limits = @version.read_limits(limit, page_size)
                
                page = self.page(
                    to: to,
                    from: from,
                    date_sent_before: date_sent_before,
                    date_sent: date_sent,
                    date_sent_after: date_sent_after,
                    page_size: limits['page_size'],
                )
                
                @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
              end
              
              ##
              # When passed a block, yields SmsMessageInstance records from the API.
              # This operation lazily loads records as efficiently as possible until the limit
              # is reached.
              # @param [String] to The to
              # @param [String] from The from
              # @param [Time] date_sent_before The date_sent
              # @param [Time] date_sent The date_sent
              # @param [Time] date_sent_after: The date_sent
              # @param [Integer] limit Upper limit for the number of records to return.                  stream()
              #  guarantees to never return more than limit.                  Default is no limit
              # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
              #  the default value of 50 records.                      If no page_size is defined
              #                       but a limit is defined, stream() will attempt to read the
              #                       limit with the most efficient page size, i.e. min(limit, 1000)
              def each
                limits = @version.read_limits
                
                page = self.page(
                    page_size: limits['page_size'],
                )
                
                @version.stream(page,
                                limit: limits['limit'],
                                page_limit: limits['page_limit']).each {|x| yield x}
              end
              
              ##
              # Retrieve a single page of SmsMessageInstance records from the API.
              # Request is executed immediately.
              # @param [String] to The to
              # @param [String] from The from
              # @param [Time] date_sent_before The date_sent
              # @param [Time] date_sent The date_sent
              # @param [Time] date_sent_after: The date_sent
              # @param [String] page_token PageToken provided by the API
              # @param [Integer] page_number Page Number, this value is simply for client state
              # @param [Integer] page_size Number of records to return, defaults to 50
              
              # @return [Page] Page of SmsMessageInstance
              def page(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, page_token: nil, page_number: nil, page_size: nil)
                params = {
                    'To' => to,
                    'From' => from,
                    'DateSent<' => Twilio.serialize_iso8601(date_sent_before),
                    'DateSent' => Twilio.serialize_iso8601(date_sent),
                    'DateSent>' => Twilio.serialize_iso8601(date_sent_after),
                    'PageToken' => page_token,
                    'Page' => page_number,
                    'PageSize' => page_size,
                }
                response = @version.page(
                    'GET',
                    @uri,
                    params
                )
                return SmsMessagePage.new(@version, response, @solution)
              end
              
              ##
              # Provide a user friendly representation
              def to_s
                '#<Twilio.Api.V2010.SmsMessageList>'
              end
            end
          
            class SmsMessagePage < Page
              ##
              # Initialize the SmsMessagePage
              # @param [Version] version Version that contains the resource
              # @param [Response] response Response from the API
              # @param [Hash] solution Path solution for the resource
              # @param [String] account_sid A 34 character string that uniquely identifies this
              #   resource.
              
              # @return [SmsMessagePage] SmsMessagePage
              def initialize(version, response, solution)
                super(version, response)
                
                # Path Solution
                @solution = solution
              end
              
              ##
              # Build an instance of SmsMessageInstance
              # @param [Hash] payload Payload response from the API
              
              # @return [SmsMessageInstance] SmsMessageInstance
              def get_instance(payload)
                return SmsMessageInstance.new(
                    @version,
                    payload,
                    account_sid: @solution['account_sid'],
                )
              end
              
              ##
              # Provide a user friendly representation
              def to_s
                '<Twilio.Api.V2010.SmsMessagePage>'
              end
            end
          
            class SmsMessageContext < InstanceContext
              ##
              # Initialize the SmsMessageContext
              # @param [Version] version Version that contains the resource
              # @param [String] account_sid The account_sid
              # @param [String] sid The sid
              
              # @return [SmsMessageContext] SmsMessageContext
              def initialize(version, account_sid, sid)
                super(version)
                
                # Path Solution
                @solution = {
                    account_sid: account_sid,
                    sid: sid,
                }
                @uri = "/Accounts/#{@solution[:account_sid]}/SMS/Messages/#{@solution[:sid]}.json"
              end
              
              ##
              # Deletes the SmsMessageInstance
              # @return [Boolean] true if delete succeeds, true otherwise
              def delete
                return @version.delete('delete', @uri)
              end
              
              ##
              # Fetch a SmsMessageInstance
              # @return [SmsMessageInstance] Fetched SmsMessageInstance
              def fetch
                params = {}
                
                payload = @version.fetch(
                    'GET',
                    @uri,
                    params,
                )
                
                return SmsMessageInstance.new(
                    @version,
                    payload,
                    account_sid: @solution['account_sid'],
                    sid: @solution['sid'],
                )
              end
              
              ##
              # Update the SmsMessageInstance
              # @param [String] body The body
              
              # @return [SmsMessageInstance] Updated SmsMessageInstance
              def update(body: nil)
                data = {
                    'Body' => body,
                }
                
                payload = @version.update(
                    'POST',
                    @uri,
                    data: data,
                )
                
                return SmsMessageInstance.new(
                    @version,
                    payload,
                    account_sid: @solution['account_sid'],
                    sid: @solution['sid'],
                )
              end
              
              ##
              # Provide a user friendly representation
              def to_s
                context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
                "#<Twilio.Api.V2010.SmsMessageContext #{context}>"
              end
            end
          
            class SmsMessageInstance < InstanceResource
              ##
              # Initialize the SmsMessageInstance
              # @param [Version] version Version that contains the resource
              # @param [Hash] payload payload that contains response from Twilio
              # @param [String] account_sid A 34 character string that uniquely identifies this
              #   resource.
              # @param [String] sid The sid
              
              # @return [SmsMessageInstance] SmsMessageInstance
              def initialize(version, payload, account_sid: nil, sid: nil)
                super(version)
                
                # Marshaled Properties
                @properties = {
                    'account_sid' => payload['account_sid'],
                    'api_version' => payload['api_version'],
                    'body' => payload['body'],
                    'date_created' => Twilio.deserialize_rfc2822(payload['date_created']),
                    'date_updated' => Twilio.deserialize_rfc2822(payload['date_updated']),
                    'date_sent' => Twilio.deserialize_rfc2822(payload['date_sent']),
                    'direction' => payload['direction'],
                    'from' => payload['from'],
                    'price' => payload['price'].to_f,
                    'price_unit' => payload['price_unit'],
                    'sid' => payload['sid'],
                    'status' => payload['status'],
                    'to' => payload['to'],
                    'uri' => payload['uri'],
                }
                
                # Context
                @instance_context = nil
                @params = {
                    'account_sid' => account_sid,
                    'sid' => sid || @properties['sid'],
                }
              end
              
              ##
              # Generate an instance context for the instance, the context is capable of
              # performing various actions.  All instance actions are proxied to the context
              # @param [Version] version Version that contains the resource
              
              # @return [SmsMessageContext] SmsMessageContext for this SmsMessageInstance
              def context
                unless @instance_context
                  @instance_context = SmsMessageContext.new(
                      @version,
                      @params['account_sid'],
                      @params['sid'],
                  )
                end
                @instance_context
              end
              
              def account_sid
                @properties['account_sid']
              end
              
              def api_version
                @properties['api_version']
              end
              
              def body
                @properties['body']
              end
              
              def date_created
                @properties['date_created']
              end
              
              def date_updated
                @properties['date_updated']
              end
              
              def date_sent
                @properties['date_sent']
              end
              
              def direction
                @properties['direction']
              end
              
              def from
                @properties['from']
              end
              
              def price
                @properties['price']
              end
              
              def price_unit
                @properties['price_unit']
              end
              
              def sid
                @properties['sid']
              end
              
              def status
                @properties['status']
              end
              
              def to
                @properties['to']
              end
              
              def uri
                @properties['uri']
              end
              
              ##
              # Deletes the SmsMessageInstance
              # @return [Boolean] true if delete succeeds, true otherwise
              def delete
                @context.delete()
              end
              
              ##
              # Fetch a SmsMessageInstance
              # @return [SmsMessageInstance] Fetched SmsMessageInstance
              def fetch
                @context.fetch()
              end
              
              ##
              # Update the SmsMessageInstance
              # @param [String] body The body
              
              # @return [SmsMessageInstance] Updated SmsMessageInstance
              def update(body: nil)
                @context.update()
              end
              
              ##
              # Provide a user friendly representation
              def to_s
                context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
                "<Twilio.Api.V2010.SmsMessageInstance #{context}>"
              end
            end
          end
        end
      end
    end
  end
end