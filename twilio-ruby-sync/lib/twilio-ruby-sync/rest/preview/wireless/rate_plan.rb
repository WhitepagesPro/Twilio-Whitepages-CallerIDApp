##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Preview < Domain
      class Wireless < Version
        class RatePlanList < ListResource
          ##
          # Initialize the RatePlanList
          # @param [Version] version Version that contains the resource
          
          # @return [RatePlanList] RatePlanList
          def initialize(version)
            super(version)
            
            # Path Solution
            @solution = {}
            @uri = "/RatePlans"
          end
          
          ##
          # Lists RatePlanInstance records from the API as a list.
          # Unlike stream(), this operation is eager and will load `limit` records into
          # memory before returning.
          # @param [Integer] limit Upper limit for the number of records to return. stream()
          #                   guarantees to never return more than limit.  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
          #  the default value of 50 records.  If no page_size is                      defined
          #  but a limit is defined, stream() will attempt to read                      the
          #  limit with the most efficient page size,                      i.e. min(limit, 1000)
          
          # @return [Array] Array of up to limit results
          def list(limit: nil, page_size: nil)
            self.stream(
                limit: limit,
                page_size: page_size
            ).entries
          end
          
          ##
          # Streams RatePlanInstance records from the API as an Enumerable.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return.                  stream()
          #  guarantees to never return more than limit.                  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
          #  the default value of 50 records.                      If no page_size is defined
          #                       but a limit is defined, stream() will attempt to                      read the
          #  limit with the most efficient page size,                       i.e. min(limit, 1000)
          
          # @return [Enumerable] Enumerable that will yield up to limit results
          def stream(limit: nil, page_size: nil)
            limits = @version.read_limits(limit, page_size)
            
            page = self.page(
                page_size: limits['page_size'],
            )
            
            @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
          end
          
          ##
          # When passed a block, yields RatePlanInstance records from the API.
          # This operation lazily loads records as efficiently as possible until the limit
          # is reached.
          # @param [Integer] limit Upper limit for the number of records to return.                  stream()
          #  guarantees to never return more than limit.                  Default is no limit
          # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
          #  the default value of 50 records.                      If no page_size is defined
          #                       but a limit is defined, stream() will attempt to read the
          #                       limit with the most efficient page size, i.e. min(limit, 1000)
          def each
            limits = @version.read_limits
            
            page = self.page(
                page_size: limits['page_size'],
            )
            
            @version.stream(page,
                            limit: limits['limit'],
                            page_limit: limits['page_limit']).each {|x| yield x}
          end
          
          ##
          # Retrieve a single page of RatePlanInstance records from the API.
          # Request is executed immediately.
          # @param [String] page_token PageToken provided by the API
          # @param [Integer] page_number Page Number, this value is simply for client state
          # @param [Integer] page_size Number of records to return, defaults to 50
          
          # @return [Page] Page of RatePlanInstance
          def page(page_token: nil, page_number: nil, page_size: nil)
            params = {
                'PageToken' => page_token,
                'Page' => page_number,
                'PageSize' => page_size,
            }
            response = @version.page(
                'GET',
                @uri,
                params
            )
            return RatePlanPage.new(@version, response, @solution)
          end
          
          ##
          # Provide a user friendly representation
          def to_s
            '#<Twilio.Preview.Wireless.RatePlanList>'
          end
        end
      
        class RatePlanPage < Page
          ##
          # Initialize the RatePlanPage
          # @param [Version] version Version that contains the resource
          # @param [Response] response Response from the API
          # @param [Hash] solution Path solution for the resource
          
          # @return [RatePlanPage] RatePlanPage
          def initialize(version, response, solution)
            super(version, response)
            
            # Path Solution
            @solution = solution
          end
          
          ##
          # Build an instance of RatePlanInstance
          # @param [Hash] payload Payload response from the API
          
          # @return [RatePlanInstance] RatePlanInstance
          def get_instance(payload)
            return RatePlanInstance.new(
                @version,
                payload,
            )
          end
          
          ##
          # Provide a user friendly representation
          def to_s
            '<Twilio.Preview.Wireless.RatePlanPage>'
          end
        end
      
        class RatePlanContext < InstanceContext
          ##
          # Initialize the RatePlanContext
          # @param [Version] version Version that contains the resource
          # @param [String] sid The sid
          
          # @return [RatePlanContext] RatePlanContext
          def initialize(version, sid)
            super(version)
            
            # Path Solution
            @solution = {
                sid: sid,
            }
            @uri = "/RatePlans/#{@solution[:sid]}"
          end
          
          ##
          # Fetch a RatePlanInstance
          # @return [RatePlanInstance] Fetched RatePlanInstance
          def fetch
            params = {}
            
            payload = @version.fetch(
                'GET',
                @uri,
                params,
            )
            
            return RatePlanInstance.new(
                @version,
                payload,
                sid: @solution['sid'],
            )
          end
          
          ##
          # Provide a user friendly representation
          def to_s
            context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
            "#<Twilio.Preview.Wireless.RatePlanContext #{context}>"
          end
        end
      
        class RatePlanInstance < InstanceResource
          ##
          # Initialize the RatePlanInstance
          # @param [Version] version Version that contains the resource
          # @param [Hash] payload payload that contains response from Twilio
          # @param [String] sid The sid
          
          # @return [RatePlanInstance] RatePlanInstance
          def initialize(version, payload, sid: nil)
            super(version)
            
            # Marshaled Properties
            @properties = {
                'sid' => payload['sid'],
                'alias_' => payload['alias'],
                'account_sid' => payload['account_sid'],
                'friendly_name' => payload['friendly_name'],
                'data_metering' => payload['data_metering'],
                'capabilities' => payload['capabilities'],
                'voice_cap' => payload['voice_cap'].to_i,
                'messaging_cap' => payload['messaging_cap'].to_i,
                'commands_cap' => payload['commands_cap'].to_i,
                'data_cap' => payload['data_cap'].to_i,
                'cap_period' => payload['cap_period'].to_i,
                'cap_unit' => payload['cap_unit'],
                'date_created' => Twilio.deserialize_iso8601(payload['date_created']),
                'date_updated' => Twilio.deserialize_iso8601(payload['date_updated']),
                'url' => payload['url'],
            }
            
            # Context
            @instance_context = nil
            @params = {
                'sid' => sid || @properties['sid'],
            }
          end
          
          ##
          # Generate an instance context for the instance, the context is capable of
          # performing various actions.  All instance actions are proxied to the context
          # @param [Version] version Version that contains the resource
          
          # @return [RatePlanContext] RatePlanContext for this RatePlanInstance
          def context
            unless @instance_context
              @instance_context = RatePlanContext.new(
                  @version,
                  @params['sid'],
              )
            end
            @instance_context
          end
          
          def sid
            @properties['sid']
          end
          
          def alias_
            @properties['alias_']
          end
          
          def account_sid
            @properties['account_sid']
          end
          
          def friendly_name
            @properties['friendly_name']
          end
          
          def data_metering
            @properties['data_metering']
          end
          
          def capabilities
            @properties['capabilities']
          end
          
          def voice_cap
            @properties['voice_cap']
          end
          
          def messaging_cap
            @properties['messaging_cap']
          end
          
          def commands_cap
            @properties['commands_cap']
          end
          
          def data_cap
            @properties['data_cap']
          end
          
          def cap_period
            @properties['cap_period']
          end
          
          def cap_unit
            @properties['cap_unit']
          end
          
          def date_created
            @properties['date_created']
          end
          
          def date_updated
            @properties['date_updated']
          end
          
          def url
            @properties['url']
          end
          
          ##
          # Fetch a RatePlanInstance
          # @return [RatePlanInstance] Fetched RatePlanInstance
          def fetch
            @context.fetch()
          end
          
          ##
          # Provide a user friendly representation
          def to_s
            context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
            "<Twilio.Preview.Wireless.RatePlanInstance #{context}>"
          end
        end
      end
    end
  end
end